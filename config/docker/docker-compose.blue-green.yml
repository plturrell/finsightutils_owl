version: '3.8'

# Blue-Green deployment configuration for OWL
# Enables zero-downtime deployments with dual environments

services:
  # Nginx load balancer for blue-green switching
  nginx:
    image: nginx:1.25-alpine
    container_name: owl-nginx
    ports:
      - "8000:80"  # Main application port
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/blue-green.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-blue
      - api-green
    restart: unless-stopped
    networks:
      - owl-network

  # Blue environment
  api-blue:
    build:
      context: ../..
      dockerfile: deployment/Dockerfile.api
      args:
        - DEPLOYMENT_COLOR=blue
    image: finsight/owl-api:blue
    container_name: owl-api-blue
    expose:
      - "8000"
    environment:
      - LAYOUT_MODEL_URL=triton-blue:8000/v2/models/nv-layoutlm-financial
      - TABLE_MODEL_URL=triton-blue:8000/v2/models/nv-table-extraction
      - NER_MODEL_URL=triton-blue:8000/v2/models/nv-financial-ner
      - USE_GPU=true
      - BASE_URI=http://finsight.dev/kg/
      - INCLUDE_PROVENANCE=true
      - DEPLOYMENT_COLOR=blue
    volumes:
      - ../../data:/app/data
    depends_on:
      - triton-blue
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - owl-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all
              
  owl-converter-blue:
    build:
      context: ../..
      dockerfile: deployment/Dockerfile.owl
      args:
        - DEPLOYMENT_COLOR=blue
    image: finsight/owl-converter:blue
    container_name: owl-converter-blue
    expose:
      - "8000"
    environment:
      - BASE_URI=http://finsight.dev/ontology/sap/
      - INFERENCE_LEVEL=standard
      - OUTPUT_DIR=/app/results
      - DEPLOYMENT_COLOR=blue
    volumes:
      - owl_results_blue:/app/results
    restart: unless-stopped
    networks:
      - owl-network

  triton-blue:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    container_name: owl-triton-blue
    expose:
      - "8000"  # HTTP
      - "8001"  # gRPC
      - "8002"  # Metrics
    environment:
      - LD_LIBRARY_PATH=/opt/tritonserver/lib
      - DEPLOYMENT_COLOR=blue
    volumes:
      - ../../nvidia_triton/model_repository:/models
    command: ["tritonserver", "--model-repository=/models", "--strict-model-config=false", "--log-verbose=1"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - owl-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  # Green environment
  api-green:
    build:
      context: ../..
      dockerfile: deployment/Dockerfile.api
      args:
        - DEPLOYMENT_COLOR=green
    image: finsight/owl-api:green
    container_name: owl-api-green
    expose:
      - "8000"
    environment:
      - LAYOUT_MODEL_URL=triton-green:8000/v2/models/nv-layoutlm-financial
      - TABLE_MODEL_URL=triton-green:8000/v2/models/nv-table-extraction
      - NER_MODEL_URL=triton-green:8000/v2/models/nv-financial-ner
      - USE_GPU=true
      - BASE_URI=http://finsight.dev/kg/
      - INCLUDE_PROVENANCE=true
      - DEPLOYMENT_COLOR=green
    volumes:
      - ../../data:/app/data
    depends_on:
      - triton-green
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - owl-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all
              
  owl-converter-green:
    build:
      context: ../..
      dockerfile: deployment/Dockerfile.owl
      args:
        - DEPLOYMENT_COLOR=green
    image: finsight/owl-converter:green
    container_name: owl-converter-green
    expose:
      - "8000"
    environment:
      - BASE_URI=http://finsight.dev/ontology/sap/
      - INFERENCE_LEVEL=standard
      - OUTPUT_DIR=/app/results
      - DEPLOYMENT_COLOR=green
    volumes:
      - owl_results_green:/app/results
    restart: unless-stopped
    networks:
      - owl-network

  triton-green:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    container_name: owl-triton-green
    expose:
      - "8000"  # HTTP
      - "8001"  # gRPC
      - "8002"  # Metrics
    environment:
      - LD_LIBRARY_PATH=/opt/tritonserver/lib
      - DEPLOYMENT_COLOR=green
    volumes:
      - ../../nvidia_triton/model_repository:/models
    command: ["tritonserver", "--model-repository=/models", "--strict-model-config=false", "--log-verbose=1"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - owl-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  # Include monitoring services from base configuration
  prometheus:
    extends:
      file: docker-compose.base.yml
      service: prometheus
    volumes:
      - ../prometheus/blue-green.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    extends:
      file: docker-compose.base.yml
      service: grafana

  dcgm-exporter:
    extends:
      file: docker-compose.base.yml
      service: dcgm-exporter

volumes:
  prometheus_data:
  grafana_data:
  owl_results_blue:
  owl_results_green:

networks:
  owl-network:
    driver: bridge